#!/usr/bin/env bash

SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_PATH" || exit 1

if (( $(id -u) != 0 )); then
  echo "This script must be run as root"
  echo "Please use sudo or su"
  exit 1
fi

function strip_whitespace()
{
  echo "${1// }"
}

function user_pause()
{
  read -r -p "Hit enter to continue "
}

function user_prompt()
{
  echo
  while [ -z "$(strip_whitespace $REPLY)" ]; do
    read -r -p "$1: "
  done
  echo "$answer"
}

function user_confirm()
{
  echo
  while [[ ! $REPLY =~ ^[YyNn]$ ]]; do
    read -r -p "$1 (y/n) "
  done
  [[ $REPLY =~ ^[Yy$ ]]
}

function get_git_committer_details()
{
  export GIT_NAME
  export GIT_EMAIL

  if [[ -n "$(git config user.name)" && \
    -n "$(git config user.email)" ]]; then
    GIT_NAME="$(git config user.name)"
    GIT_EMAIL="$(git config user.email)"
  else
    GIT_NAME="$(user_prompt "Enter git user name")"
    GIT_EMAIL="$(user_prompt "Enter git email")"
  fi
}

function find_and_run_installers()
{
  local installer

  echo "Looking for installers ..." >&2
  # only search subdirectories
  # exclude subdirectories ending with #
  # exclude subdirectories that are git submodules
  find . \
    -mindepth 2 \
    -maxdepth 3 \
    -name 'install' \
    -not -path '*#/*' | \
    while read -r installer; do
      echo "Found installer $installer" >&2
      # redirect stdin to prevent while loop breaking early
      # "$installer" </dev/null
      "$installer"
      if ! $?; then
        echo "FAIL: Unexpected error running installer $installer" >&2
        return 1
      fi
    done
}

function install_packages()
{
  :
  # ./packages/brew-taps || return
}

function main()
{
  local answer

  echo "Initializing all submodules..." >&2
  git submodule update --init --recursive || return

  # get the users git details
  # these will be baked into .gitlocal
  get_git_committer_details || return

  echo "Setting up default ssh keypair" >&2
  ./scripts/setup-ssh-default-keypair "$GIT_EMAIL" || return

  echo "Setting up dotfiles" >&2
  ./scripts/setup-dotfiles || return

  #msg_info "Installing packages..." >&2
  #install_packages
  #if (( $? != 0 )); then
  #  msg_error "Unexpected issue installing packages" >&2
  #  return 1
  #fi

  #run_installers
  #if (( $? != 0 )); then
  #  msg_error "Unexpected issue running in installers" >&2
  #  return 1
  #fi
}

main "$@"
exit $?

