#!/usr/bin/env bash

cd "`dirname "${BASH_SOURCE[0]}"`" || exit

# Guard clauses
if (( $(id -u) == 0 )); then
  echo "This script must be run as the intended user" >&2
  echo "Please do not use sudo or su" >&2
  exit 1
fi

# Globals
DOTFILES_GROUP="dotfiles"
ARG_FORCE=false       # allow install over existing
ARG_OPTION=backup     # overwrite | backup | skip
ARG_PROVISION=true    # run provisioners

# Variables that may be used by child scripts
export VAR_USER_NAME=
export VAR_USER_EMAIL=

# User prompts
# GLOBAL_VAR (ref),question
PROMPTS=(  
  "VAR_USER_NAME,Please enter your user name"
  "VAR_USER_EMAIL,Please enter your email address"
)

# Console formatting
BOLD="$(tput bold)"; _BOLD="$(tput sgr0)"
UNDERLINE="$(tput smul)"; _UNDERLINE="$(tput rmul)"

function usage()
{
  SCRIPT_NAME="`basename ${BASH_SOURCE[0]}`"
  cat <<EOF
    usage: $SCRIPT_NAME [-f|--force]
                        [-o|--option <${UNDERLINE}option${_UNDERLINE}>]
                        [-p|--provision[<${UNDERLINE}boolean${_UNDERLINE}>]]
                        [-v|--var <${UNDERLINE}name=value${_UNDERLINE}>]
                        [-h|--help]
                        <command> [<args>]

    ${BOLD}OPTIONS${_BOLD}
        -f|--force
            Allow install over existing installation
        -o|--option
            File handling option for existing files.
            Defaults to ${BOLD}backup${_BOLD}
            Valid options are:
              ${BOLD}overwrite${_BOLD} existing
              ${BOLD}backup${_BOLD} existing
              ${BOLD}skip${_BOLD} existing
        -p|--provision
            Run provisioners after installers have completed.
            Defaults to true
        -v|--var
            Comma separated list of variables expressed as name/value pairs.
            Valid variables are:
              ${BOLD}email.address${_BOLD}
              ${BOLD}user.name{_BOLD}
        -h|--help
            Display this help information

    ${BOLD}COMMANDS${_BOLD}

    Meta
        ${BOLD}help${_BOLD}   Display this help information
EOF
}

# Prompt user for (non-blank) response
# Arguments:
#   $1: User message
# Returns:
#   stdout: User response
function prompt()
{
  # Loop until non-blank response
  # ${name// /} replace all whitespace with empty string
  while [ -z "${REPLY// /}" ]; do
    read -r -p "$1: "
  done
  echo "$REPLY"
}

# Prompt for confirmation (y,Y,n,N)
# Arguments:
#   $1: User response to confirm
# Returns:
#   0: User confirmed
#   1: User not confirmed
function confirm()
(
  # Loop until y/n answer given
  while ! [[ $REPLY =~ ^[yYnN]$ ]]; do 
    read -r -p "$1? (y/n):"
  done
  [[ $REPLY =~ ^[yY]$ ]]
)

# Wrapper function to loop until user has supplied confirmed response
# Arguments:
#   $1: User message
# Returns:
#   stdout: User response
function prompt_and_confirm()
(
  local response 

  # Loop until response has been given and confirmed
  while true; do
    response="`prompt "$1"`"
    confirm "$response" && break
  done

  echo "$response"
)

# Grouping function for misc activities not directly relating
# to dotfiles installation
# Arguments:
# Returns:
function init()
{
  # Ask for sudo permissions upfront
  sudo -v

  # Initialize all submodules
  git submodule update --init --recursive >/dev/null 2>&1 || return
  git submodule foreach git checkout master >/dev/null 2>&1 || return
}

# Prompt user for values for confirmation that has not been
# explicitly set by user provided options
# Arguments:
# Returns:
function get_user_config()
{
  local idx prompt prompt_var_ref prompt_message
  # "${!name[@]}"
  # expand array keys into separate words  
  for idx in "${!PROMPTS[@]}"; do
    IFS=','; prompt=(${PROMPTS[$idx]})
    prompt_var_ref="${prompt[0]}"

    # Check if variable has been set
    # ${!ref}
    # Use indirection to reference variable by name in a separate variable    
    if [ -z "${!prompt_var_ref}" ]; then
      prompt_msg="${prompt[1]}"
      # use `read` to dynamically set variable based on its name
      read $prompt_var_ref <<< "$(prompt_and_confirm "$prompt_msg")"
    else
      echo "Using configuration: ${!prompt_var_ref}" >&2
    fi
  done
}

# Main
# Arguments:
# Returns:
function main()
{
  local idx prompt prompt_var prompt_msg file

  if [ -n "$DOTFILES_VERSION" ] && ! $ARG_FORCE; then
    echo "Dotfiles already installed" >&2
    echo "Use -f option to override" >&2
    false; return
  fi

  # Administrative activities not directly relating to installation
  echo "Initializing installation" >&2  
  init || return

  # Get all user configuration that has not been explicitly set by options
  echo "Gathering installation configuration" >&2
  get_user_config || return

  # Create dotfiles group and add current user to it
  if ! grep -q -F dotfiles /etc/group; then
    echo "Creating group $DOTFILES_GROUP to own all dotfile files" >&2
    sudo groupadd "$DOTFILES_GROUP" || return
  fi
  sudo usermod -a -G "$DOTFILES_GROUP" "$USER"

  # Install dotfiles
  echo "Installing dotfiles" >&2
  ./scripts/setup-dotfiles \
    -o "$ARG_OPTION" \
    -g "$DOTFILES_GROUP" || return  

  # Install packages
  echo "Running package installers" >&2
  find ./packages -type f -printf "%f\n" \
    | sort \
    | while read file; do
      echo "... Running package installer $file" >&2
      "./packages/${file}" || return
    done  

  # Run installers
  # -u: Run as user so as to pull in new environment
  echo "Running installers" >&2
  ./scripts/setup-installers -u "install" || return

  # Run provisioners  
  # -u: Run as user so as to pull in new environment
  if $ARG_PROVISION; then
    echo "Running provisioners" >&2    
    ./scripts/setup-installers -u "provision" || return
  fi
}

# -o short options, --long long options
# -q manual error handling
# opt --> flag, opt: --> option with mandatory arg, opt:: --> option with optional arg
if ! OPTS=`getopt -q -o fo:p::v:h --long force,option:,provision::,var:,help -- "$@"`; then
    usage ; exit
fi

eval set -- "$OPTS"

while true; do
  case "$1" in
    -f|--force) ARG_FORCE=true ; shift ;;
    -o|--option)
      case "$2" in
        "overwrite") ARG_OPTION=overwrite ; shift 2 ;;
        "backup") ARG_OPTION=backup ; shift 2 ;;
        "skip") ARG_OPTION=skip ; shift 2 ;;
        *) usage ; exit 1 ;;
      esac ;;
    -p|--option)
      case "$2" in
        "true"|"") ARG_PROVISION=true ; shift 2 ;;
        "false") ARG_PROVISION=false ; shift 2 ;;
        *) usage ; exit 1 ;;
      esac ;;
    -v|--var)
      IFS=','; VARS=($2)
      for IDX in "${!VARS[@]}"; do
        IFS='='; VAR=(${VARS[$IDX]})
        case "${VAR[0]}" in
          "user.email") VAR_USER_EMAIL="${VAR[1]}" ;;
          "user.name") VAR_USER_NAME="${VAR[1]}" ;;
          *) usage ; exit 1 ;;
        esac
      done
      shift 2 ;;
    -h|help) usage ; exit ;;
    --) shift ; break ;;
    *) usage ; exit 1 ;;
  esac
done

COMMAND="$1" ; shift

case "$COMMAND" in
  help) usage ; exit ;;
  "") : ;;
  *) usage ; exit 1 ;;
esac

main "$@"
exit $?
