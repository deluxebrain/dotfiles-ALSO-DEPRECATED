#!/bin/bash

# Only proceed if running interactively
[[ "$-" == *i* ]] || return

# Uses the nvm provided `nvm_find_nvmrc` function to find the .nvmrc file in scope
__NVM_DIRTY=false
function __PROMPT_COMMAND_NVM()
{
    local nvmrc_path="$(nvm_find_nvmrc)"
    local node_version nvmrc_node_version

    if [ -z "$nvmrc_path" ]; then
        # Return early if no work todo
        ! $__NVM_DIRTY && return
        nvm use default
        __NVM_DIRTY=false
    else
        # In a node project
        __NVM_DIRTY=true
        node_version="$(nvm version)"
        nvmrc_node_version="$(nvm version "$(cat "$nvmrc_path")")"        
        if [ "$nvmrc_node_version" = "N/A" ]; then
            # Specificed node version is not installed locally     
            nvm install            
        elif [ "$nvmrc_node_version" != "$node_version" ]; then
            nvm use
        fi
    fi
}

function set_shelloptions()
{
    shopt -s expand_aliases
    shopt -s nocaseglob # case insensitive globbing
    shopt -s cdspell # autocorrect typos in path with using `cd`
    # Perform recursive globbing on `**`, e.g:
    # find . -type f -name "*.py" -print0 | xargs -0 cat | wc -l
    # becomes this:
    # wc **/*.py -l
    shopt -s globstar
    shopt -s histappend # append to history file ( instead of overwriting )
}

function configure_history()
{
    # don't put duplicate lines or lines starting with space in the history.
    HISTCONTROL=ignoreboth
    HISTSIZE=1000
    HISTFILESIZE=2000
}

function start_powerline()
{
    # PROMPT_COMMAND must be set before configuring Powerline    
    export PROMPT_COMMAND=__PROMPT_COMMAND_NVM
    command -v powerline-daemon >/dev/null 2>&1 || return
    powerline-daemon -q
    export POWERLINE_BASH_CONTINUATION=1
    export POWERLINE_BASH_SELECT=1
    source "/usr/share/powerline/bindings/bash/powerline.sh"
}

function start_completions()
{    
    if ! shopt -oq posix; then
        if [ -f /usr/share/bash-completion/bash_completion ]; then
            . /usr/share/bash-completion/bash_completion
        elif [ -f /etc/bash_completion ]; then
            . /etc/bash_completion
        fi
    fi
}

set_shelloptions
configure_history
start_powerline
start_completions

# Aliases
[ -f "$HOME/.bash_aliases" ] && source "$HOME/.bash_aliases"

# Start ssh-agent
[ -x "$HOME/.ssh/.ssh-agent" ] && source "$HOME/.ssh/.ssh-agent"

unset -f set_shelloptions
unset -f configure_history
unset -f start_powerline
unset -f configure_prompt
unset -f start_completions
