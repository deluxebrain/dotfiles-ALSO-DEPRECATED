#!/usr/bin/env bash

SCRIPT_NAME=`basename ${BASH_SOURCE[0]}`

# Console formatting
BOLD="$(tput bold)"; _BOLD="$(tput sgr0)"
UNDERLINE="$(tput smul)"; _UNDERLINE="$(tput rmul)"

# Regexs used to parse PyEnv responses. E.g,
# pyenv install --list
# \tDISTRIBUTION-VERSION
# Note CPython is represented by a blank distribution name. E.g,
#   3.7.0
#   miniconda3-4.3.30
RE_DISTRIBUTION="((.*)-)?"
RE_VERSION="([0-9]+\.[0-9]+\.[0-9]+)"
# captures: raw, _, distribution, version
RE_PYENV="s/^[ \t]*(${RE_DISTRIBUTION}${RE_VERSION})$"

function usage()
{
  cat <<EOF
    usage: $SCRIPT_NAME [-a|--all] [-d|--distribution=<${UNDERLINE}distribution${_UNDERLINE}>]
                        [-h|--help] [-l|--latest]
                        [-v|--version=<${UNDERLINE}version${_UNDERLINE}>]
                        <command> [<args>]

    ${BOLD}OPTIONS${_BOLD}
        -a|--all
            Include remote results. Defaults filtering by results installed locally.
        -d|--distribution
            Filter results to specified ${UNDERLINE}distribution${_UNDERLINE}.
            Defaults to CPython.
        -h|--help
            Display this help information
        -l|--lastest
            Filter results to latest for specified distribution.
        -v|--version
            Semantic ${UNDERLINE}version${_UNDERLINE} template in form <major>.<minor>.<patch>.
            Supports wildcards, e.g. 3.1.* will filter to lastest 3.1 release

    ${BOLD}COMMANDS${_BOLD}

    List information about available Python versions
        ver|versions                Available versions
        dist|distributions          Availble distributions

    Python installation
        install                     Install Python version

    Meta
        help                        Display this help information

EOF
}

function error_if_empty()
{
    awk 'END { if (NR != 0) { print; exit 0 } else { exit 1 }}' \
        < /dev/stdin
}

function filter_versions()
{
    local distribution="$1"

    # sed returns: raw, distribution, version
    sed -nr "${RE_PYENV}/\1,\3,\4/p" \
        | awk -F"," -v x="$distribution" '$2==x {print $3}' \
        | sort -V \
        < /dev/stdin
}

function filter_distributions()
{
    # sed returns: distribution
    # cpython defaults to blank distribution name so fix that up
    sed -nr "${RE_PYENV}/\3/p" \
        | sed 's/^$/cpython/' \
        | sort \
        | uniq \
        < /dev/stdin
}

function list_distributions()
{
    echo "Listing distributions $TXT_FROM"

    ( $ARG_ALL && pyenv install --list || pyenv versions ) \
        | filter_distributions
}

function list_versions()
{
    echo "Listing $TXT_VER of $TXT_DIST distribution $TXT_FROM"

    ( $ARG_ALL && pyenv install --list || pyenv versions ) \
        | filter_versions "$DISTRIBUTION" \
        | ( $ARG_LATEST && tail -n 1 || cat )
}

function install_lastest_version()
{
    local version

    version="$(latest_available_version "$1")"
    if (( $? != 0 )); then
        echo "ERROR: Distribution $1 not found" >&2
        false; return
    fi

    echo "INFO: Installing $version of distribution $1" >&2
    if ! pyenv install "$version"; then
        echo "ERROR: Installation of $version failed" >&2
        false; return
    fi
}

ARG_ALL=false ; ARG_DISTRIBUTION=false ; ARG_LATEST=false; ARG_VERSION=false
DISTRIBUTION= ; VERSION= ; ACTION=

# -o short options, --long long options
# -q manual error handling
# opt --> flag, opt: --> option with optional arg, opt:: --> option with mandatory arg
if ! OPTS=`getopt -q -o ad:lv: --long all,distribution:,latest,version: -- "$@"`; then
    usage ; exit
fi

eval set -- "$OPTS"

while true ; do
    case "$1" in
        -a|--all) ARG_ALL=true; shift ;;
        -d|--distribution)
            case "$2" in
                "") usage ; exit 1 ;;
                *) ARG_DISTRIBUTION=true ; DISTRIBUTION="$2" ; shift 2 ;;
            esac ;;
        -h|--help) usage ; exit ;;
        -l|--latest) ARG_LATEST=true; shift ;;
        -v|--version)
            case "$2" in
                "") usage ; exit 1 ;;
                *) ARG_VERSION=true ; VERSION="$2" ; shift 2 ;;
            esac ;;
        --) shift ; break ;;
        *) usage ; exit 1 ;;
    esac
done

if ! (( $# == 1 )); then
    usage ; exit
fi

COMMAND="$1" ; shift

$ARG_LATEST && TXT_VER="${BOLD}latest version${_BOLD}" || TXT_VER="${BOLD}all versions${_BOLD}"
$ARG_DISTRIBUTION && TXT_DIST="${BOLD}${DISTRIBUTION}${_BOLD}" || TXT_DIST="${BOLD}CPython${_BOLD}"
$ARG_ALL && TXT_FROM="${BOLD}available remotely${_BOLD}" || TXT_FROM="${BOLD}installed locally${_BOLD}"

case "$COMMAND" in
    ver|versions) list_versions ;;
    dist|distributions) list_distributions ;;
    install) ;;
    help) usage ; exit ;;
    *) usage ; exit 1 ;;
esac
