#!/usr/bin/env bash

# Globals
XENV="pyenv"                # Command to invoke, defaults to pyenv
# Supported languages and their default distributions
declare -A XENVS
XENVS=(
    ["pyenv"]="CPython"
    ["rbenv"]="CRuby"
    ["nodenv"]="NodeJS"
)
ARG_ALL=false               # ARG_ALL ? remote : local
ARG_DISTRIBUTION=false      # distribution filter specified ?
# DISTRIBUTION=             distribution filter
ARG_LATEST=false            # ARG_LATEST ? only latest : all
ARG_VERSION=false           # version filter specified ?
VERSION_TMPL=               # version filter template
# ARG_MIN=                  version gt/gte
# ARG_MAX=                  version lt/lte
# VERSION_MIN=              version used by gt/gte
# VERSION_MAX=              version used by lt/lte

# Regexs used to parse xenv responses. E.g,
# pyenv install --list
# (stdout) \tDISTRIBUTION-VERSION
# Note default distribution is represented by a blank distribution name. E.g,
#   3.7.0
#   miniconda3-4.3.30
RE_DISTRIBUTION="((.*)-)?"
RE_VERSION="([0-9]+\.[0-9]+\.[0-9]+)"
# groups: raw, _, distribution, version
RE_XENV="s/^[ \t]*(${RE_DISTRIBUTION}${RE_VERSION})$"

# Console formatting
BOLD="$(tput bold)"; _BOLD="$(tput sgr0)"
UNDERLINE="$(tput smul)"; _UNDERLINE="$(tput rmul)"

function usage()
{
  SCRIPT_NAME="`basename ${BASH_SOURCE[0]}`"
  cat <<EOF
    usage: $SCRIPT_NAME [-a|--all]
                        [-d|--distribution=<${UNDERLINE}distribution${_UNDERLINE}>]
                        [-h|--help]
                        [-l|--latest]
                        [-v|--version=<${UNDERLINE}version${_UNDERLINE}>]
                        [--lt[e]=<${UNDERLINE}version${_UNDERLINE}>]
                        [--gt[e]=<${UNDERLINE}version${_UNDERLINE}>]
                        <command> [<args>]

    ${BOLD}OPTIONS${_BOLD}
        -c|--command
            Command to invoke.
            The following command are supported:
            ${BOLD}pyenv${_BOLD} (default)
            ${BOLD}rbenv${_BOLD}
            ${BOLD}nodenv${_BOLD}
        -a|--all
            Include remote results.
            Default filters by results installed locally.
        -d|--distribution
            Filter results to specified ${UNDERLINE}distribution${_UNDERLINE}.
            Defaults to default distribution for the language.
        -h|--help
            Display this help information
        -l|--lastest
            Filter results to latest for specified distribution.
        -v|--version
            Semantic ${UNDERLINE}version${_UNDERLINE} template in form <major>.<minor>.<patch>.
            Supports wildcards, e.g. 3.1.* will filter to lastest 3.1 release.
            Defaults to wildcard filter "*.*.*"
        --lt[e]
            Filter all versions to less then [equals] specified version
            Requires full semantic version to be specified
        --gt[e]
            Filter all versions to greater then [equals] specified version
            Requires full semantic version to be specified

    ${BOLD}COMMANDS${_BOLD}

    List information about available language versions
        ver|versions                Available versions
        dist|distributions          Availble distributions

    Management
        install                     Install language version

    Meta
        help                        Display this help information

EOF
}

# Dynamically invoke specified command using parameters as passed
# Argyments:
#   $1..n: Parameters to pass specified command
# Globals:
#   XENV: Command to invoke
# Returns:
#   stdout: Result to command
function dispatch()
{
    eval "command $XENV $@"
}

# $1 <= $2 ? true : false
# Arguments:
#   $1: Param 1
#   $2: Param 2
# Returns:
#   0: $1 <= $2
#   1: $1 > %2
function ver_lte()
{
    [ "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
}

# $1 = $2 ? true : false
# Arguments:
#   $1: Param 1
#   $2: Param 2
# Returns:
#   0: $1 < $2
#   1: $1 >= %2
function ver_lt()
{
    [ "$1" = "$2" ] && return 1 || ver_lte "$1" "$2"
}

# Identity function that returns 1 if passed an empty list
# Arguments:
#   stdin: _
# Returns:
#   stdout: _
#   1: Empty list
function error_if_empty()
{
    awk '{ print } END { if (NR == 0) { exit 1 }}' < /dev/stdin
}

# Identity function
# Arguments:
#   stdin: _
# Returns:
#   stdout: _
function identity()
{
    cat < /dev/stdin
}

# Forms xenv-version string
# Arguments:
#   $1: Version number
# Globals:
#   ARG_DISTRIBUTION
#   DISTRIBUTION
# Returns:
#   xenv-version
function form_xenv_version()
{
    $ARG_DISTRIBUTION && \
        echo "${DISTRIBUTION}-${1}" || \
        echo "$1"
}

# Filters xenv versions list by distribution
# Arguments:
#   stdin: \tDISTRIBUTION-VERSION
# Globals:
#   DISTRIBUTION
# Returns:
#   stdout: versions (asc)
function filter_by_distribution()
{
    # groups: raw, distribution, version
    sed -nr "${RE_XENV}/\1,\3,\4/p" \
        | awk -F"," -v x="$DISTRIBUTION" '$2==x {print $3}' \
        | sort -V \
        < /dev/stdin
}

# Filters xenv versions list to get unique list of distributions
# Arguments:
#   stdin: \tDISTRIBUTION-VERSION
# Returns:
#   stdout: distributions (asc)
function extract_distributions()
{
    # groups: distribution
    # default distribution defaults to blank so fix that up
    sed -nr "${RE_XENV}/\3/p" \
        | sed "s/^$/${XENVS["$XENV"]}/" \
        | sort \
        | uniq \
        < /dev/stdin
}

# Filters semantic version list by version specification
# Arguments:
#   stdin: [VERSION]
# Globals:
#   VERSION
# Returns:
#   stdout: versions (asc)
function filter_by_version()
{
    local version_pattern
    local -a version_parts

    # replace * with [[:digit:]]*
    # search '*' needs escaping to prevent globbing
    # * in replace term allows to multiple matches
    # version_pattern="${VERSION_TMPL//\*/[[:digit:]]*}"
    version_pattern="${VERSION_TMPL//\*/[[:digit:]]*}"

    # split version into parts array on IFS
    version_parts=( ${version_pattern//./ } )

    # -o: only display matched text (i.e. the version)
    grep -o "${version_parts[0]}\.${version_parts[1]}\.${version_parts[2]}" \
        | sort -V \
        < /dev/stdin
}

# Filters list of versions my selected comparison operator
# Arguments:
#   $1: {lt|lte|gt|gte}
#   stdin: [VERSION]
# Globals:
#   VERSION_MAX
#   VERSION_MIN
function where_version()
{
    local version

    while read -r version; do
        case "$1" in
            "lt") ver_lt "$version" "$VERSION_MAX" && echo "$version" ;;
            "lte") ver_lte "$version" "$VERSION_MAX" && echo "$version" ;;
            "gt") ver_lt "$VERSION_MIN" "$version" && echo "$version" ;;
            "gte") ver_lte "$VERSION_MIN" "$version" && echo "$version" ;;
            *) false; return ;;
        esac
    done < /dev/stdin
}

# Checks passed array for the specified element
# Arguments:
#   $1: element
#   $2: array ( passed as "${my_array[@]}" )
# Returns:
#   0: array contains element
#   1: array does not contain element
function contains_element()
{
    local element match="$1"
    shift # shift the argument list to the array
    # `for` without `in` implicitly iterates over the argument list
    for element ; do
        [[ "$element" == "$match" ]] && { true ; return ; }
    done
    false; return
}

# Lists all language versions available, defaulting to default distribution
# Globals:
#   ARG_ALL
#   ARG_LATEST
#   DISTRIBUTION
# Returns:
#   stdout: versions (asc)
#   1: no versions available
function CMD_versions()
{
    printf "%s%s%s%s\n" \
        "`echo "Listing $TXT_LATEST of $TXT_DIST distribution $TXT_FROM"`" \
        "`[ -n "$ARG_MIN" ] && echo " $TXT_MIN"`" \
        "`[ -n "$ARG_MAX" ] && echo " ${ARG_MIN+and }$TXT_MAX"`" \
        "`$ARG_VERSION && echo " matching version specification $TXT_VERSION"`" \
        >&2

    ( $ARG_ALL && dispatch install --list || dispatch versions ) \
        | filter_by_distribution \
        | ( $ARG_VERSION && filter_by_version || identity ) \
        | ( [ -n "$ARG_MAX" ] && where_version "$ARG_MAX" || identity ) \
        | ( [ -n "$ARG_MIN" ] && where_version "$ARG_MIN" || identity ) \
        | ( $ARG_LATEST && tail -n 1 || identity ) \
        | error_if_empty

    if ! (( $? == 0 )); then
        echo "No versions of $TXT_DIST distribution $TXT_FROM" >&2; false
    fi
}

# Lists all language distributions available
# Globals:
#   ARG_ALL
# Returns:
#   stdout: distributions (asc)
#   1: no distributions available
function CMD_distributions()
{
    echo "Listing distributions $TXT_FROM" >&2

    ( $ARG_ALL && dispatch install --list || dispatch versions ) \
        | extract_distributions \
        | error_if_empty

    if ! (( $? == 0 )); then
        echo "No distributions $TXT_FROM" >&2; false
    fi
}

# Installs specified language version
# Globals:
#   ARG_VERSION
#   ARG_DISTRIBUTION
#   DISTRIBUTION
# Returns:
#   1: no matching language version available
function CMD_install()
{
    local version xenv_version

    echo "Determining latest version of $TXT_DIST" \
        "`$ARG_VERSION && echo "matching version spec $TXT_VERSION"`" >&2

    if ! version="`dispatch install --list \
        | filter_by_distribution \
        | ( $ARG_VERSION && filter_by_version || identity ) \
        | tail -n 1 \
        | error_if_empty`"; then
        echo "No versions of $TXT_DIST distribution available to install" >&2
        false; return
    fi

    echo "Installing ${BOLD}${version}${_BOLD} of $TXT_DIST" >&2

    xenv_version="$(form_xenv_version "$version")"
    if ! dispatch install --skip-existing "$xenv_version" >&2; then
        echo "ERROR: Installation of $version of $TXT_DIST failed" >&2
        false; return
    fi
}

# -o short options, --long long options
# -q manual error handling
# opt --> flag, opt: --> option with mandatory arg, opt:: --> option with optional arg
if ! OPTS=`getopt -q -o ac:d:lv:h --long all,command:,distribution:,latest,version:,lt:,lte:,gt:,gte:,help -- "$@"`; then
    usage ; exit
fi

eval set -- "$OPTS"

while true ; do
    case "$1" in
        -a|--all) ARG_ALL=true ; shift ;;
        -c|--command)
            contains_element "$2" "${!XENVS[@]}" || { usage ; exit 1 ; }
            XENV="$2" ; shift 2 ;;
        -d|--distribution)
            [ -n "$2" ] || { usage ; exit 1 ; }
            ARG_DISTRIBUTION=true ; DISTRIBUTION="$2" ; shift 2 ;;
        -h|--help) usage ; exit ;;
        -l|--latest) ARG_LATEST=true; shift ;;
        -v|--version)
            if [[ "$2" =~ ^[0-9\*]+\.[0-9\*]+\.[0-9\*]+$ ]] ; then
                ARG_VERSION=true ; VERSION_TMPL="$2" ; shift 2
            else
                usage ; exit 1
            fi ;;
        --lt|--lte)
            [ -z "$ARG_MAX" ] || { usage ; exit 1 ; }
            if [[ "$2" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then
                ARG_MAX="${1//-/}" ; VERSION_MAX="$2" ; shift 2
            else
                usage ; exit 1
            fi ;;
        --gt|--gte)
            [ -z "$ARG_MIN" ] || { usage ; exit 1 ; }
            if [[ "$2" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then
                ARG_MIN="${1//-/}" ; VERSION_MIN="$2" ; shift 2
            else
                usage ; exit 1
            fi ;;
        --) shift ; break ;;
        *) usage ; exit 1 ;;
    esac
done

if ! (( $# == 1 )); then
    usage ; exit 1
fi

COMMAND="$1" ; shift

# Strings used by CLI stdout
$ARG_LATEST && TXT_LATEST="${BOLD}latest version${_BOLD}" \
    || TXT_LATEST="${BOLD}all versions${_BOLD}"
$ARG_DISTRIBUTION && TXT_DIST="${BOLD}${DISTRIBUTION}${_BOLD}" \
    || TXT_DIST="${BOLD}${XENVS[$XENV]}${_BOLD}"
$ARG_ALL && TXT_FROM="${BOLD}available remotely${_BOLD}" \
    || TXT_FROM="${BOLD}installed locally${_BOLD}"
$ARG_VERSION && TXT_VERSION="${BOLD}${VERSION_TMPL}${_BOLD}" \
    || TXT_VERSION="${BOLD}*.*.*${_BOLD}"
case "$ARG_MAX" in
    lt) TXT_MAX="less than $VERSION_MAX" ;;
    lte) TXT_MAX="less than or equal to $VERSION_MAX" ;;
esac
case "$ARG_MIN" in
    gt) TXT_MIN="greater than $VERSION_MIN" ;;
    gte) TXT_MIN="greater than or equal to $VERSION_MIN" ;;
esac

case "$COMMAND" in
    ver|versions) CMD_versions ;;
    dist|distributions) CMD_distributions ;;
    install) CMD_install ;;
    help) usage ; exit ;;
    *) usage ; exit 1 ;;
esac
