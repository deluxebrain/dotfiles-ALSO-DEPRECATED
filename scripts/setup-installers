#!/usr/bin/env bash

cd "`dirname "${BASH_SOURCE[0]}"`" || exit

# Globals
GIT_ROOT=               # project git root directory
ARG_RUN_AS_USER=false   # run installer script as specified user
ARG_USER=               # user to run script as
ARG_ACTION=             # install | provision

# Console formatting
BOLD="$(tput bold)"; _BOLD="$(tput sgr0)"
UNDERLINE="$(tput smul)"; _UNDERLINE="$(tput rmul)"

function usage()
{
  SCRIPT_NAME="`basename ${BASH_SOURCE[0]}`"
  cat <<EOF
    usage: $SCRIPT_NAME   [-u|--user[${UNDERLINE}<user>${_UNDERLINE}]]
                          [-h|--help]
                          <command> [<args>]

    ${BOLD}OPTIONS${_BOLD}
        -u|--user
            Run script as specified user. Defaults to \$USER.
        -h|--help
            Display this help information

    ${BOLD}COMMANDS${_BOLD}

    Actions
      install                 Run ${UNDERLINE}install${_UNDERLINE} files
      provision               Run ${UNDERLINE}provision${_UNDERLINE} files

    Meta
        ${BOLD}help${_BOLD}   Display this help information
EOF
}

# Determine root git directory within current directory location
# Arguments:
# Returns:
#   stdout: Root git folder
#   1: Not a git repository
function git_root()
{
  git rev-parse --show-toplevel 2>/dev/null || false; return
}

# Determines if specified directory is a git submodule
# Arguments:
#   $1: Specified directory
# Returns:
#   0: Specified directory is a git submodule
#   1: Specified directory is not a git submodule
function dir_is_submodule()
(
  local dir_git_root

  cd "$1" || return
  dir_git_root="$(git_root)" || return
  ! [ "$GIT_ROOT" = "$dir_git_root" ]
)

# Run all installers matching the specified action
# Arguments:
# Returns:
function find_and_run_installers()
(
  local installer

  # Start looking from the project root git directory
  GIT_ROOT="$(git_root)" || return
  cd "$GIT_ROOT" || return

  # find
  # use absolute path with find as we need file references to be absolute
  # mindepth: only search subdirectories
  # maxdepth: we know installers are in shallow directories
  # exclude subdirectories ending with #
  # sed
  # we are looking for files such as:
  # /foo/bar/install
  # /foo/bar/10_install
  find "`pwd`" \
    -mindepth 2 \
    -maxdepth 3 \
    -type f \
    -not -path '*#/*' \
  | sed -nr "s|.*/([0-9]+_)?${ARG_ACTION}|\0|p" \
  | sort \
  | while read -r installer; do

      # exclude subdirectories that are git submodules
      dir_is_submodule "$(dirname "$installer")" && continue

      echo "$installer" && continue

      # redirect stdin otherwise installers can hang
      # ( something todo with being in a while loop ? )
      if $ARG_RUN_AS_USER; then
        echo "Running installer $installer as $ARG_USER" >&2
        sudo su -c "$installer </dev/null" --login "$ARG_USER"
      else
        echo "Running installer $installer" >&2
        "$installer" </dev/null
      fi

      if (( $? != 0 )); then
        echo "ERROR: Unexpected error running installer $installer" >&2
        false; return
      fi
  done
)

# Main
# Arguments:
# Returns:
function main()
{
  find_and_run_installers || return
}

# -o short options, --long long options
# -q manual error handling
# opt --> flag, opt: --> option with mandatory arg, opt:: --> option with optional arg
if ! OPTS=`getopt -q -o u::h --long user::,help -- "$@"`; then
    usage ; exit
fi

eval set -- "$OPTS"

while true; do
  case "$1" in
    -u|--user)
      ARG_RUN_AS_USER=true
      [ -n "$2" ] && ARG_USER="$2" || ARG_USER="$USER"
      shift 2 ;;
    -h|--help) usage ; exit ;;
    --) shift ; break ;;
    *) usage ; exit 1 ;;
  esac
done

COMMAND="$1" ; shift

case "$COMMAND" in
  install|provision) ARG_ACTION="$COMMAND" ;;
  help) usage ; exit ;;
  *) usage ; exit 1 ;;
esac

main "$@"
exit $?
