#!/usr/bin/env bash

cd "`dirname "${BASH_SOURCE[0]}"`" || exit

# Globals
ACTUAL_USER="${SUDO_USER:-$USER}"
ARG_GROUP="dotfiles"        # default group
ARG_BACKUP_ALL=true
ARG_OVERWRITE_ALL=false
ARG_SKIP_ALL=false

# Console formatting
BOLD="$(tput bold)"; _BOLD="$(tput sgr0)"
UNDERLINE="$(tput smul)"; _UNDERLINE="$(tput rmul)"

function usage()
{
  SCRIPT_NAME="`basename ${BASH_SOURCE[0]}`"
  cat <<EOF
    usage: $SCRIPT_NAME [-g|--group <${UNDERLINE}group${_UNDERLINE}>]
                        [-o|--option <${UNDERLINE}option${_UNDERLINE}>]                       
                        [-h|--help]
                        <command> [<args>]

    ${BOLD}OPTIONS${_BOLD}
        -g|--group
            Group to set as owner of dotfile files            
        -o|--option
            File handling option for existing files.
            Defaults to ${BOLD}backup${_BOLD}
            Valid options are:
              ${BOLD}overwrite${_BOLD} existing
              ${BOLD}backup${_BOLD} existing
              ${BOLD}skip${_BOLD} existing       
        -h|--help
            Display this help information

    ${BOLD}COMMANDS${_BOLD}

    Meta
        ${BOLD}help${_BOLD}   Display this help information
EOF
}

# Utility functions

function get_group()
{
  echo "${ARG_GROUP:-ACTUAL_USER}"
}

function set_file_permissions()
{
  if readlink "$1"; then
    sudo chown -h "$ACTUAL_USER":"$(get_group)" "$1"
  else
    sudo chown "$ACTUAL_USER":"$(get_group)" "$1"
  fi
}

function strip_file_extension()
{
  echo "$1" | sed "s/^\(.\+\)\.\(.\+\)/\1/"
}

function get_git_root_dir()
{
  git rev-parse --show-toplevel
}

function render_template()
(
  local template model_path
  template="$(cat "$1")"
  model_path="$(strip_file_extension "$1").model"

  if [ -x "$model_path" ]; then
    if ! source "$model_path"; then
      echo "ERROR: Unexpected error sourcing $model_path" >&2
    fi
  fi
  eval "echo \"${template}\""
)

function path_exists()
{
  # -L: file exists and is a symlink
  [[ -n "$1" && (-f "$1" || -d "$1" || -L "$1" ) ]]
}

function dst_points_to_src()
{
  local src dst target
  src="$1"; dst="$2"

  # check if dst is a symlink that points to src
  # readlink returns blank and error if not a symlink
  target="$(readlink "$dst")" || return
  [ "$target" == "$src" ]
}

function get_link_type()
{
  # Greedy front trim up to and inc last .
  echo "${1##*.}"
}

# UI functions

function prompt_for_file_overwrite_action()
{
  local src dst optionstring options OFS action
  src="$1"; dst="$2"

  # capture current IFS so we can set back later
  OFS=$IFS
  IFS=","
  optionstring="Overwrite,Overwrite all,Backup,Backup all,Skip,Skip all,Exit"
  # form an array from our options string ( splitting on , )
  options=( $optionstring )
  IFS=$OFS

  # the prompt string for the select is taken from PS3
  PS3="File already exists $dst; what do you want todo? "
  select action in "${options[@]}"; do
    case "$action" in
      Overwrite) g_overwrite=true; break ;;
      "Overwrite all") ARG_OVERWRITE_ALL=true; break ;;
      Backup) g_backup=true; break ;;
      "Backup all") ARG_BACKUP_ALL=true; break ;;
      Skip) g_skip=true; break ;;
      "Skip all") ARG_SKIP_ALL=true; break ;;
      "Exit") exit 1 ;;
      *) echo "ERROR: Invalid selection" >&2 ;;
    esac
  done
}

# Strategy functions

function destination_exists_strategy()
{
  local src dst link_type
  src="$1"; dst="$2"
  link_type="$(get_link_type "$src")"

  if $ARG_OVERWRITE_ALL || $ARG_BACKUP_ALL || $ARG_SKIP_ALL; then
    # global strategy in place - no more action required
    return
  fi

  if dst_points_to_src "$src" "$dst"; then
    # destination points to source - skip current file
    g_skip=true;
    return
  fi

  case "$link_type" in
  merge)
    return
    ;;
  esac

  # user intervention required
  prompt_for_file_overwrite_action "$src" "$dst"
}

function form_backup_path()
{
  echo "$1.backup"
}

function form_filename()
{
  # foo.bar becomes foo
  # foo_.bar becomes .foo
  echo "$(basename "$1")" \
    | sed "s/^\(.\+\)_\.\(.\+\)/.\1.\2/" \
    | sed "s/^\(.\+\)\.\(.\+\)/\1/"
}

function form_link_path()
{
  local filename link_type dst

  filename="$(form_filename "$1")"
  link_type="$(get_link_type "$1")"

  case "$link_type" in
  dotfile)
    dst="${HOME}/.${filename}"
    ;;
  symlink|merge|template)
    dst="${HOME}/${filename}"
    ;;
  *)
    echo "ERROR: Unknown link format ${link_type}" >&2
    return 1
    ;;
  esac

  echo "$dst"
}

# Coordinating functions

function link_files()
{
  local src dst
  local g_overwrite g_backup g_skip

  # Find:
  # -H: For symlinks use the file info of the linked file
  # -not -path: Exclude .git directory and contents
  # -o for or, -not for not
  # Complex logical expressions can be built up using escaped brackets
  # Note: Use absolute path for find so that absolute paths are returned
  # Note: Dont use a pipe (e.g. for | read) else stdin will be tied up
  # https://stackoverflow.com/questions/6883363/read-input-in-bash-inside-a-while-loop
  # Using /dev/tty to get around this breaks over ssh (where no tty)
  for src in $(find -H "$(pwd)" \
    -maxdepth 3 \
    \( -name '*.symlink' -o -name '*.dotfile' -o -name '*.merge' -o -name '*.template' \) \
    -not -path '*.git*')
  do
    dst="$(form_link_path "$src")"

    if ! check_for_and_handle_existing_file "$src" "$dst"; then
      echo "ERROR: Unable to handle existing file $dst for $src" >&2
      false; return
    fi

    if ! link_file "$src" "$dst"; then
      echo "ERROR: Unable to link $src to $dst" >&2
      false; return
    fi
  done
}

function check_for_and_handle_existing_file()
{
  local src dst backup_path
  src="$1"; dst="$2"
  g_overwrite=false; g_backup=false; g_skip=false

  if path_exists "$dst"; then
    destination_exists_strategy "$src" "$dst"

    if $ARG_OVERWRITE_ALL || $g_overwrite; then
      if ! rm -rf "$dst"; then
        echo "ERROR: Unable to delete $dst" >&2
        false; return
      fi
    elif $ARG_BACKUP_ALL || $g_backup; then
      backup_path="$(form_backup_path "$dst")"
      # -L to unlink any symlinks so we get a hard backup
      # -p to preserve file permissions
      cp -p -f -R -L "$dst" "$backup_path" || return
      if (( $? != 0 )); then
        echo "ERROR: Unable to backup $dst to $backup_path" >&2
      fi
    elif $ARG_SKIP_ALL || $g_skip; then
      return
    fi
  fi
}

function link_file()
{
  local src dst link_type
  src="$1"; dst="$2"

  if $ARG_SKIP_ALL || $g_skip; then
    return
  fi

  link_type="$(get_link_type "$src")"
  case "$link_type" in
  dotfile|symlink)
    # link target to point at source
    # -s	: create a symbolic link
    # -f	: unlink the target if it exists
    # -n	: if target is already a symlink, dont follow it
    if ! ln -sfn "$src" "$dst"; then
      echo "ERROR: Unable to link $src to $dst" >&2
      false; return;
    fi
    set_file_permissions "$dst"
    ;;
  merge)
    # create a standalone dotfile that is outside of the repository
    if ! [ -d "$dst" ]; then
      if ! mkdir "$dst"; then
        echo "ERROR: Unable to create directory $dst" >&2
        false; return
      fi
    fi
    # ensure the source has a trailing / to ensure the contents are copied
    # ( otherwise end up with a nested directory )
    rsync -a \
      --chown="$ACTUAL_USER":"$(get_group)" \
      --exclude "install" \
      --update "$src/" "$dst"
    ;;
  template)
    if ! render_template "$src" > "$dst"; then
      echo "ERROR: Unable to render template $src to $dst" >&2
      false; return
    fi
    set_file_permissions "$dst"
    ;;
  *)
    echo "ERROR: Unknown link format $link_type" >&2
    false; return;
    ;;
  esac
}

# Entry point

function main()
{   
  # Change into the root git directory for the current script
  cd "$(get_git_root_dir)" || return

  # Run the file linker
  link_files || return
}

# -o short options, --long long options
# -q manual error handling
# opt --> flag, opt: --> option with mandatory arg, opt:: --> option with optional arg
if ! OPTS=`getopt -q -o g:o:h --long group:,option:,help -- "$@"`; then
    usage ; exit
fi

eval set -- "$OPTS"

while true; do
  case "$1" in    
    -g|--group) ARG_GROUP="$2" ;;
    -o|--option)
      case "$2" in
        "overwrite") ARG_OVERWRITE_ALL=true ; shift 2 ;;
        "backup") ARG_BACKUP_ALL=true ; shift 2 ;;
        "skip") ARG_SKIP_ALL_false ; shift 2 ;;
        *) usage ; exit 1 ;;
      esac ;;   
    -h|help) usage ; exit ;;
    --) shift ; break ;;
    *) usage ; exit 1 ;;
  esac
done

COMMAND="$1" ; shift

case "$COMMAND" in
  help) usage ; exit ;;
  "") : ;;
  *) usage ; exit 1 ;;
esac

main "$@"
exit $?