#!/bin/bash

SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_PATH" || exit 1

ACTUAL_USER="${SUDO_USER:-$USER}"

function usage()
{
  cat >&2 <<EOF
$(basename "$0") [OPTION] groupname
groupname : name of group to for dotfile file ownership
-f : force overwrite existing dotfiles
-b : backup existing dotfiles
-s : skip existing dotfiles
-h : help
EOF
  false
}

# Utility functions

function get_group()
{
  echo "${g_group:-ACTUAL_USER}"
}

function set_file_permissions()
{
  if readlink "$1"; then
    sudo chown -h "$ACTUAL_USER":"$(get_group)" "$1"
  else
    sudo chown "$ACTUAL_USER":"$(get_group)" "$1"
  fi
}

function strip_file_extension()
{
  echo "$1" | sed "s/^\(.\+\)\.\(.\+\)/\1/"
}

function get_git_root_dir()
{
  git rev-parse --show-toplevel
}

function render_template()
(
  local template model_path
  template="$(cat "$1")"
  model_path="$(strip_file_extension "$1").model"

  if [ -x "$model_path" ]; then
    if ! source "$model_path"; then
      echo "ERROR: Unexpected error sourcing $model_path" >&2
    fi
  fi
  eval "echo \"${template}\""
)

function path_exists()
{
  # -L: file exists and is a symlink
  [[ -n "$1" && (-f "$1" || -d "$1" || -L "$1" ) ]]
}

function dst_points_to_src()
{
  local src dst target
  src="$1"; dst="$2"

  # check if dst is a symlink that points to src
  # readlink returns blank and error if not a symlink
  target="$(readlink "$dst")" || return
  [ "$target" == "$src" ]
}

function get_link_type()
{
  # Greedy front trim up to and inc last .
  echo "${1##*.}"
}

# UI functions

function prompt_for_file_overwrite_action()
{
  local src dst optionstring options OFS action
  src="$1"; dst="$2"

  # capture current IFS so we can set back later
  OFS=$IFS
  IFS=","
  optionstring="Overwrite,Overwrite all,Backup,Backup all,Skip,Skip all,Exit"
  # form an array from our options string ( splitting on , )
  options=( $optionstring )
  IFS=$OFS

  # the prompt string for the select is taken from PS3
  # NOTE pipe from tty incase stdin is already in use (e.g. while loop)
  PS3="File already exists $dst; what do you want todo? "
  select action in "${options[@]}"; do
    case "$action" in
      Overwrite) g_overwrite=true; break ;;
      "Overwrite all") g_overwrite_all=true; break ;;
      Backup) g_backup=true; break ;;
      "Backup all") g_backup_all=true; break ;;
      Skip) g_skip=true; break ;;
      "Skip all") g_skip_all=true; break ;;
      "Exit") exit 1 ;;
      *) echo "ERROR: Invalid selection" >&2 ;;
    esac
  done < /dev/tty
}

# Strategy functions

function destination_exists_strategy()
{
  local src dst link_type
  src="$1"; dst="$2"
  link_type="$(get_link_type "$src")"

  if $g_overwrite_all || $g_backup_all || $g_skip_all; then
    # global strategy in place - no more action required
    return
  fi

  if dst_points_to_src "$src" "$dst"; then
    # destination points to source - skip current file
    g_skip=true;
    return
  fi

  case "$link_type" in
  merge)
    return
    ;;
  esac

  # user intervention required
  prompt_for_file_overwrite_action "$src" "$dst"
}

function form_backup_path()
{
  echo "$1.backup"
}

function form_filename()
{
  # foo.bar becomes foo
  # foo_.bar becomes .foo
  echo "$(basename "$1")" \
  | sed "s/^\(.\+\)_\.\(.\+\)/.\1.\2/" \
  | sed "s/^\(.\+\)\.\(.\+\)/\1/"
}

function form_link_path()
{
  local filename link_type dst

  filename="$(form_filename "$1")"
  link_type="$(get_link_type "$1")"

  case "$link_type" in
  dotfile)
    dst="${HOME}/.${filename}"
    ;;
  symlink|merge|template)
    dst="${HOME}/${filename}"
    ;;
  *)
    echo "ERROR: Unknown link format ${link_type}" >&2
    return 1
    ;;
  esac

  echo "$dst"
}

# Coordinating functions

function link_files()
{
  local src dst
  local g_overwrite g_backup g_skip

  # Find:
  # -H: For symlinks use the file info of the linked file
  # -not -path: Exclude .git directory and contents
  # -o for or, -not for not
  # Complex logical expressions can be built up using escaped brackets
  # Note use absolute path for find so that absolute paths are returned
  find -H "$(pwd)" -maxdepth 3 \
    \( -name '*.symlink' -o -name '*.dotfile' -o -name '*.merge' -o -name '*.template' \) \
    -not -path '*.git*' \
    | while read -r src
  do
    dst="$(form_link_path "$src")"

    if ! check_for_and_handle_existing_file "$src" "$dst"; then
      echo "ERROR: Unable to handle existing file $dst for $src" >&2
      false; return
    fi

    if ! link_file "$src" "$dst"; then
      echo "ERROR: Unable to link $src to $dst" >&2
      false; return
    fi
  done
}

function check_for_and_handle_existing_file()
{
  local src dst backup_path
  src="$1"; dst="$2"
  g_overwrite=false; g_backup=false; g_skip=false

  if path_exists "$dst"; then
    destination_exists_strategy "$src" "$dst"

    if $g_overwrite_all || $g_overwrite; then
      if ! rm -rf "$dst"; then
        echo "ERROR: Unable to delete $dst" >&2
        false; return
      fi
    elif $g_backup_all || $g_backup; then
      backup_path="$(form_backup_path "$dst")"
      # -L to unlink any symlinks so we get a hard backup
      # -p to preserve file permissions
      cp -p -f -R -L "$dst" "$backup_path" || return
      if (( $? != 0 )); then
        echo "ERROR: Unable to backup $dst to $backup_path" >&2
      fi
    elif $g_skip_all || $g_skip; then
      return
    fi
  fi
}

function link_file()
{
  local src dst link_type
  src="$1"; dst="$2"

  if $g_skip_all || $g_skip; then
    return
  fi

  link_type="$(get_link_type "$src")"
  case "$link_type" in
  dotfile|symlink)
    # link target to point at source
    # -s	: create a symbolic link
    # -f	: unlink the target if it exists
    # -n	: if target is already a symlink, dont follow it
    if ! ln -sfn "$src" "$dst"; then
      echo "ERROR: Unable to link $src to $dst" >&2
      false; return;
    fi
    set_file_permissions "$dst"
    ;;
  merge)
    # create a standalone dotfile that is outside of the repository
    if ! [ -d "$dst" ]; then
      if ! mkdir "$dst"; then
        echo "ERROR: Unable to create directory $dst" >&2
        false; return
      fi
    fi
    # ensure the source has a trailing / to ensure the contents are copied
    # ( otherwise end up with a nested directory )
    rsync -a \
      --chown="$(get_user)":"$(get_group)" \
      --exclude "install" \
      --update "$src/" "$dst"
    ;;
  template)
    if ! render_template "$src" > "$dst"; then
      echo "ERROR: Unable to render template $src to $dst" >&2
      false; return
    fi
    set_file_permissions "$dst"
    ;;
  *)
    echo "ERROR: Unknown link format $link_type" >&2
    false; return;
    ;;
  esac
}

# Entry point

function parse_options()
{
  local opt opt_set
  opt_set=false

  # e.g. fA:x
  # expect flag -f, argument -A, flag -x
  # if very first character is : then  use silent error reporting
  while getopts ":fbsh" opt; do
    case $opt in
    f)
      $opt_set && { usage; return; }
      opt_set=true; g_overwrite_all=true
      ;;
    b)
      $opt_set && { usage; return; }
      opt_set=true; g_backup_all=true
      ;;
    s)
      $opt_set && { usage; return; }
      opt_set=true; g_skip_all=true
      ;;
    h|*)
      usage; return
      ;;
    esac
  done

  # strip parsed options ( up to -- )
  shift $(($OPTIND-1))

  g_group="$1"
  [ -n "$g_group" ] || { usage; return; }
}

function main()
{
  local g_overwrite_all g_backup_all g_skip_all
  local g_group
  g_overwrite_all=false
  g_backup_all=false
  g_skip_all=false

  parse_options "$@" || return

  # Change into the root git directory for the current script
  cd "$(get_git_root_dir)" || return

  # Run the file linker
  link_files || return
}

main "$@"
exit $?
